---
platform: linux

inputs:
- name: config # contains download-file config file
- name: env
- name: download-config

params:
  ENV_FILE: env.yml
  # - Filepath of the env config YAML
  # - Relative to root of the `env` input
  DOWNLOAD_CONFIG_FILE: download-config.yml
  # - Filepath to the download product configuration yaml file
  # - The path is relative to the root of the `config` input

  CONFIG_FILE: config.yml
  # - Filepath to the product configuration yaml file
  # - The path is relative to the root of the `config` input

  FLOATING_STEMCELL: true
  # - Optional
  # - Assigns the stemcell to all compatible products
  # - If false, a user is required to run the assign-stemcell task

run:
  path: bash
  args:
  - "-c"
  - |
    cat /var/version && echo ""
    set -eux

    expected_version=$(bosh int download-config/${DOWNLOAD_CONFIG_FILE} --path /product-version)
    expected_product=$(bosh int config/${CONFIG_FILE} --path /product-name)

    staged_products=$(mktemp)
    om --env env/"${ENV_FILE}" staged-products -f json > ${staged_products}

    set +e
    staged_version=$(bosh int ${staged_products} --path /name=${expected_product}/version)
    set -e

    if [ "${expected_version}" = "${staged_version}" ]; then
      echo "${expected_version} already staged"
    else
      downloaded_files=$(mktemp -d)
      # shellcheck disable=SC2068
      om download-product \
         --config download-config/"${DOWNLOAD_CONFIG_FILE}" \
         --output-directory ${downloaded_files}

      { printf "\nReading product details..."; } 2> /dev/null
      # shellcheck disable=SC2068
      product_slug=$(om interpolate \
         --config download-config/"${DOWNLOAD_CONFIG_FILE}" \
         --path /pivnet-product-slug)

      product_file=$(om interpolate \
         --config ${downloaded_files}/download-file.json \
         --path /product_path)

      stemcell_file=$(om interpolate \
         --config ${downloaded_files}/download-file.json \
         --path /stemcell_path?)

      { printf "\nChecking if product needs winfs injected..."; } 2> /dev/null
      if [ "$product_slug" == "pas-windows" ]; then
         TILE_FILENAME="$(basename "$product_file")"

         # The winfs-injector determines the necessary windows image,
         # and uses the CF-foundation dockerhub repo
         # to pull the appropriate Microsoft-hosted foreign layer.
         winfs-injector \
         --input-tile "$product_file" \
         --output-tile "${downloaded_files}/${TILE_FILENAME}"
      fi

      om --env env/"${ENV_FILE}" upload-product \
         --product ${downloaded_files}/*.pivotal

      om --env env/"${ENV_FILE}" upload-stemcell \
         --floating="$FLOATING_STEMCELL" \
         --stemcell "${downloaded_files}"/*.tgz

      product_name="$(om tile-metadata \
         --product-path ${downloaded_files}/*.pivotal \
         --product-name)"

      product_version="$(om tile-metadata \
         --product-path ${downloaded_files}/*.pivotal \
         --product-version)"

      om --env env/"${ENV_FILE}" stage-product \
         --product-name "$product_name" \
         --product-version "$product_version"

      rm -rf ${downloaded_files}
    fi
