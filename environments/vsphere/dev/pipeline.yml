resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:
- name: platform-automation
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: platform-automation

- name: installation
  type: s3
  source:
    access_key_id: {{access_key}}
    bucket: state
    region_name: us-east-1
    secret_access_key: {{secret_key}}
    regexp: ((foundation))/installation-(.*).zip
    skip_ssl_verification: true
    endpoint: {{s3_endpoint}}

- name: configuration
  type: git
  source:
    uri: git@github.com:calebwashburn/platform-automation-reference.git
    private_key: {{git_private_key}}
    paths: ["environments/((foundation))/config"]
    branch: master

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: configuration
      trigger: true
      params:
        unpack: true
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params: &credhub_interpolate_params
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca))
      PREFIX: '/((foundation))'
      INTERPOLATION_PATH: "environments/((foundation))/config/secrets"
    input_mapping:
      files: configuration
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-files
    params:
      CONFIG_FILE: environments/((foundation))/config/secrets/versions/opsman.yml
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: downloaded-product
      state: configuration
      config: configuration
      vars: configuration
      secrets: interpolated-files
    params:
      STATE_FILE: environments/((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: environments/((foundation))/config/templates/opsman.yml
      VARS_FILES: vars/environments/((foundation))/config/vars/opsman.yml secrets/environments/((foundation))/config/secrets/templates/opsman.yml
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: platform-automation-image
          config:
            platform: linux
            inputs:
            - name: configuration
            - name: generated-state
            outputs:
            - name: configuration-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: environments/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: "cwashburn@pivotal.io"
              GIT_AUTHOR_NAME: "Platform Automation"
              COMMIT_MESSAGE: 'Update state file'
            run:
              path: bash
              args:
                - "-c"
                - |
                  cat /var/version && echo ""
                  set -eu
                  git config --global user.email "$GIT_AUTHOR_EMAIL"
                  git config --global user.name "$GIT_AUTHOR_NAME"
                  git clone configuration configuration-commit
                  cp generated-state/"$FILE_SOURCE_PATH" \
                     configuration-commit/"$FILE_DESTINATION_PATH"
                  cd configuration-commit
                  if [[ -n $(git status --porcelain) ]]; then
                    git add -A
                    git commit -m "$COMMIT_MESSAGE" --allow-empty
                  fi
        - put: configuration
          params:
            repository: configuration-commit
            merge: true
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 20
    input_mapping:
      env: interpolated-files
      config: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml
      AUTH_CONFIG_FILE: environments/((foundation))/config/secrets/templates/auth.yml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: configuration
      secrets: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml
      DIRECTOR_CONFIG_FILE: environments/((foundation))/config/templates/director.yml
      VARS_FILES: vars/environments/((foundation))/config/vars/director.yml secrets/environments/((foundation))/config/secrets/templates/director.yml
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

- name: export-installation
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: configuration
      trigger: true
      passed: [ install-opsman ]
      params:
        unpack: true
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params: *credhub_interpolate_params
    input_mapping:
      files: configuration
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml
  - put: installation
    params:
      file: installation/installation-*.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: configuration
      trigger: true
      passed: [ export-installation ]
      params:
        unpack: true
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]
    - get: installation
      passed: [ export-installation ]
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params: *credhub_interpolate_params
    input_mapping:
      files: configuration
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-files
    params:
      CONFIG_FILE: environments/((foundation))/config/secrets/versions/opsman.yml
  - task: upgrade-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: downloaded-product
      state: configuration
      config: configuration
      env: interpolated-files
      installation: installation
      vars: configuration
      secrets: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml
      OPSMAN_CONFIG_FILE: environments/((foundation))/config/templates/opsman.yml
      VARS_FILES: vars/environments/((foundation))/config/vars/opsman.yml secrets/environments/((foundation))/config/secrets/templates/opsman.yml
      STATE_FILE: environments/((foundation))/state/state.yml
    ensure: *make-state-commit
- name: pas
  serial: true
  plan:
  - aggregate:
    - get: configuration
      trigger: true
      passed: [ upgrade-opsman ]
      params:
        unpack: true
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params: *credhub_interpolate_params
    input_mapping:
      files: configuration
  - task: download
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-files
    params:
      CONFIG_FILE: environments/((foundation))/config/secrets/versions/cf.yml

  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: downloaded-product
      env: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: downloaded-product
      env: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: downloaded-stemcell
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

  - task: configure
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: configuration
      secrets: interpolated-files
    params:
      CONFIG_FILE: environments/((foundation))/config/templates/cf.yml
      VARS_FILES: vars/environments/((foundation))/config/defaults/cf.yml vars/environments/((foundation))/config/vars/cf.yml secrets/environments/((foundation))/config/secrets/templates/cf.yml
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

  - task: apply-product-changes
    image: platform-automation-image
    config:
      platform: linux
      inputs:
      - name: env
      params:
        ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml
      run:
        path: /bin/bash
        args:
        - -c
        - |
          cat /var/version && echo ""
          set -eux
          om --env env/"${ENV_FILE}" apply-changes --product-name cf
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

- name: healthwatch
  serial: true
  plan:
  - aggregate:
    - get: configuration
      trigger: true
      passed: [ pas ]
      params:
        unpack: true
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params: *credhub_interpolate_params
    input_mapping:
      files: configuration

  - task: download
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-files
    params:
      CONFIG_FILE: environments/((foundation))/config/secrets/versions/p-healthwatch.yml

  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: downloaded-product
      env: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: downloaded-product
      env: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: downloaded-stemcell
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

  - task: configure-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: configuration
      secrets: interpolated-files
    params:
      CONFIG_FILE: environments/((foundation))/config/templates/p-healthwatch.yml
      VARS_FILES: vars/environments/((foundation))/config/defaults/p-healthwatch.yml vars/environments/((foundation))/config/vars/p-healthwatch.yml secrets/environments/((foundation))/config/secrets/templates/p-healthwatch.yml
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml

  - task: apply-product-changes
    image: platform-automation-image
    config:
      platform: linux
      inputs:
      - name: env
      params:
        ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml
      run:
        path: /bin/bash
        args:
        - -c
        - |
          cat /var/version && echo ""
          set -eux
          om --env env/"${ENV_FILE}" apply-changes --product-name p-healthwatch
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: environments/((foundation))/config/secrets/templates/env.yml
